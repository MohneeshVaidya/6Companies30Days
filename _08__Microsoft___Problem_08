class Solution:
    def mostProfitablePath(self, edges: List[List[int]], bob: int, amount: List[int]) -> int:
        tree = {}
        for u, v in edges:
            if(u not in tree):
                tree[u] = []
            tree[u].append(v)
            if(v not in tree):
                tree[v] = []
            tree[v].append(u)
        
        parent = [-1 for i in range(len(amount))]

        def dfs(u, prev, vis):
            vis.add(u)
            parent[u] = prev if(prev != -1) else u
            for i in tree[u]:
                if(i in vis):
                    continue
                dfs(i, u, vis)
        
        dfs(0, -1, set())
        
        opened = [False for i in range(len(amount))]
        return self.__helper(tree, 0, bob, amount, opened, set(), parent)
    
    def __helper(self, tree, alice, bob, amt, op, vis, parent):
        profit = 0
        vis.add(alice)
        if(not op[alice]):
            profit += ( amt[alice] if(alice != bob) else (amt[bob]//2) )
            op[alice] = True
        op[bob] = True

        tmp = float('-inf')
        for i in tree[alice]:
            if(i in vis):
                continue
            tmp = max(tmp, self.__helper(tree, i, parent[bob], amt, op, vis, parent))
        
        op[bob] = False
        return profit + ( 0 if(tmp == float('-inf')) else tmp )

        
