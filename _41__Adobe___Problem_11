from sortedcontainers import SortedList
class StockPrice:
    def __init__(self):
        self._store = SortedList(key=lambda x: x[1])
        self._set = {}
        self._curr = -1, -1

    def update(self, timestamp: int, price: int) -> None:
        if timestamp not in self._set:
            self._store.add((timestamp, price))
        else:
            self._store.discard((timestamp, self._set[timestamp]))
            self._store.add((timestamp, price))
        
        self._set[timestamp] = price
        if timestamp >= self._curr[0]:
                self._curr = timestamp, price

    def current(self) -> int:
        return self._curr[1]
        
    def maximum(self) -> int:
        return self._store[-1][1]

    def minimum(self) -> int:
        return self._store[0][1]


# Your StockPrice object will be instantiated and called as such:
# obj = StockPrice()
# obj.update(timestamp,price)
# param_2 = obj.current()
# param_3 = obj.maximum()
# param_4 = obj.minimum()
