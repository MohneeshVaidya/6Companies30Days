class Solution:
    def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        if not numerator:
            return '0'

        from collections import defaultdict
        dic, res = defaultdict(str), ''
        
        def utility(num):
            nonlocal res, d, dic

            if dic[num]:
                dic[num] = '(' + dic[num]
                return ')'

            tmp, i = num, 0
            while tmp < d:
                tmp *= 10
                if i: dic[num] += '0'
                i += 1
            
            if not tmp % d:
                return str(tmp // d)
            else:
                dic[num] += str(tmp // d)
                t = utility(tmp % d)
                return dic[num] + t

        nNeg, dNeg = (True if numerator < 0 else False), (True if denominator < 0 else False)
        n, d = numerator.__abs__(), denominator.__abs__()
        
        if not n % d:
            res = str(n // d)
        else:
            res = '{}.'.format(n // d)
            res += utility(n % d)
        
        return res if (nNeg and dNeg) or (not nNeg and not dNeg) else '-'+res
