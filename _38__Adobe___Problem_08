class Solution:
    def minMutation(self, startGene: str, endGene: str, bank: List[str]) -> int:
        if endGene not in bank:
            return -1
        elif startGene not in bank:
            bank.append(startGene)
        
        from collections import defaultdict

        def countDiff(a, b):
            count = 0
            for i in range(8):
                if a[i] != b[i]: count += 1
            return count

        graph = defaultdict(set)
        def buildGraph():
            nonlocal graph, bank
            for i in range(len(bank)):
                for j in range(i+1, len(bank)):
                    if countDiff(bank[i], bank[j]) == 1:
                        graph[bank[i]].add(bank[j])
                        graph[bank[j]].add(bank[i])
            return
        
        buildGraph()
        
        def utility():
            import heapq

            nonlocal startGene, endGene, graph
            dist = defaultdict(lambda: float("inf"))
            visited = set()
            q = [(0, startGene)]
            dist[startGene] = 0
            while q:
                dis, node = heapq.heappop(q)
                visited.add(node)
                for x in graph[node]:
                    if x in visited:
                        continue
                    elif dist[x] > 1 + dis:
                        dist[x] = 1 + dis
                        heapq.heappush(q, (dist[x], x))

            return -1 if dist[endGene] == float("inf") else dist[endGene]            

        return utility()
